(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{908:function(t,v,_){"use strict";_.r(v);var a=_(10),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"时序图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#时序图"}},[t._v("#")]),t._v(" 时序图")]),t._v(" "),_("h2",{attrs:{id:"定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),_("p",[t._v("一种UML交互图， 描述对象之间发送消息的时间顺序显示多个对象之间的动态协作")]),t._v(" "),_("p",[t._v("时序图是一个二维图，横轴表示对象，纵轴表示时间，消息在各对象之间横向传递，依照时间顺序纵向排列。")]),t._v(" "),_("h2",{attrs:{id:"作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("展示对象之间交互的顺序。将交互行为建模为消息传递，通过描述消息是如何在对象间发送和接收的来动态展示对象之间的交互；")])]),t._v(" "),_("li",[_("p",[t._v("相对于其他UML图，时序图更强调交互的时间顺序；")])]),t._v(" "),_("li",[_("p",[t._v("可以直观的描述并发进程。")])])]),t._v(" "),_("h2",{attrs:{id:"组成元素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组成元素"}},[t._v("#")]),t._v(" 组成元素")]),t._v(" "),_("ol",[_("li",[t._v("校色")]),t._v(" "),_("li",[t._v("对象、类")]),t._v(" "),_("li",[t._v("生命线")]),t._v(" "),_("li",[t._v("控制焦点")]),t._v(" "),_("li",[t._v("消息（同步、异步、返回）")]),t._v(" "),_("li",[t._v("自关联消息")]),t._v(" "),_("li",[t._v("逻辑组件")])]),t._v(" "),_("h2",{attrs:{id:"画法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#画法"}},[t._v("#")]),t._v(" 画法")]),t._v(" "),_("ol",[_("li",[t._v("划清边界，识别交互的语境；")]),t._v(" "),_("li",[t._v("将所要绘制的交互场景中的角色以及对象梳理出来；")]),t._v(" "),_("li",[t._v("从触发整个交互的某个消息开始，在生命线之间从上到下依次画出所有消息，并注明每个消息的特性（如参数等）。")])])])}),[],!1,null,null,null);v.default=s.exports}}]);