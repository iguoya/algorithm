(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{388:function(t,a,s){"use strict";s.r(a);var r=s(10),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"递归思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#递归思想"}},[t._v("#")]),t._v(" 递归思想")]),t._v(" "),s("h2",{attrs:{id:"算法思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法思想"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在定义中（直接或者间接）调用自身")])]),t._v(" "),s("li",[s("p",[t._v("复杂问题转化为规模较小的相似问题")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("少量代码可以描述复杂的计算过程，减少了代码量")])])])]),t._v(" "),s("h2",{attrs:{id:"代码结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码结构"}},[t._v("#")]),t._v(" 代码结构")]),t._v(" "),s("ol",[s("li",[t._v("边界条件，递归终止")]),t._v(" "),s("li",[t._v("递归关系式（原问题如何分解为子问题的？）")])]),t._v(" "),s("h2",{attrs:{id:"思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),s("ol",[s("li",[t._v("降低问题规模")]),t._v(" "),s("li",[t._v("求解最小子问题")])])])}),[],!1,null,null,null);a.default=e.exports}}]);